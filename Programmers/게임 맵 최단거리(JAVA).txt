import java.util.*;
class Box{
    int x = 0;
    int y = 0;
    int d = 0;
    public Box(int x, int y, int d){
        this.x = x;
        this.y = y;
        this.d = d;
    }
}
class Solution {
    public int solution(int[][] maps) {
        int answer = 0;
        Queue<Box> queue = new LinkedList<>();
        int[][] visited = new int[maps.length][maps[0].length];
        for(int i=0; i<maps.length; i++){
            for(int j=0; j<maps[0].length; j++){
                visited[i][j] = maps[i][j];
            }
        }
        maps[0][0] = 1;
        queue.add(new Box(0,0,1));
        int[] dx = {0,0,1,-1};
        int[] dy = {1,-1,0,0};
        while(!queue.isEmpty()){
            Box b = queue.poll();
            for(int i=0; i<4; i++){
                int nx = b.x + dx[i];
                int ny = b.y + dy[i];
                if(nx >= 0 && nx < maps.length && ny >= 0 && ny < maps[0].length && visited[nx][ny] != 0 && maps[nx][ny]==1){
                    visited[nx][ny] = 0;
                    queue.add(new Box(nx,ny,b.d+1));
                    maps[nx][ny] = b.d + 1;
                }
            }
        }
        if(maps[maps.length-1][maps[0].length-1] == 1){
            answer = -1;
        }
        else{
            answer = maps[maps.length-1][maps[0].length-1];
        }
        
        
        return answer;
    }
}